												
										IO流体系（抽象类）
							字节流							字符流
					InputStream OutputStream		Reader			Writer
					字节输入流 	字节输入流 			字符输入出流		字符输出出流
 					(实现类)			(实现类)			(实现类)			(实现类)
 				FileInputStream	FileOutputStream	FileReader		FileWriter



文件字节输入流:FileINputStream
	作用：以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去
	构造器									说明
	public FileInputStream(File File)		创建字节输入流管道与源文件对象接通
	public FileInputStream(String PathName)	创建字节输入流管道与源文件对象接通	

	方法名称									说明		
	public int read()						每次读取一个字节返回,如果字节已近没有可读的返回-1
	public int read(byte[] buffer)			每次读取一个字节数组返回,如果字节已近没有可读的返回-1

	注：
		性能较慢
		读取中文字符输出无法避免乱码问题

	改进：每次读取一个字节数组
	byte[] buffer = new byte[3];
	
	int len;	// 记录每次读取的字节数
	
	while((len = is.read(buffer)) != -1){
		System.out.println(new String(buffer, 0 ,len));
	}

	注:
		读取的性能得到了提升
		读取中文字符输出无法避免乱码问题

	避免出现乱码问题：
		方法一:
		定义一个与文件一样大的字节数组，一次性读取完文件的全部字节
		注:
			如果文件过大，字节数组可能引起内存溢出
		方法二:
		官方为字节输入流InputStream提供了如下API可以直接把文件的全部数据读取到一个字节数组中
		        File f = new File("pathName");
		        InputStream is = new FileInputStream("pathName");

		        byte[] buffer = new byte[(int)f.length()];
		        int len = is.read(buffer);

字节输出流
	字节输出流写数据的方法

	public void write(int a)							写一个字节出去
	public void write(byte[] buffer)					写一个自己二数组出去
	public void write(byte[] buffer, int pos, int len)	写一个字节数组的一部分出去

	字节输出流如何实现数据追加
	public FileOutputStream(String filepath, boolean append) append=true追加数据

	字节输出流实现数据换行
	os.write("\r\n".getBytes())

	写出去的数据能成功生效必须加以下代码
	flush()刷新数据
	coloe()方法是关闭流，关闭包含刷新，关闭后流不可以继续使用了。

	字节流适合做一切文件数据的拷贝，任何文件的底层都是字节，拷贝是一字不漏的转移字节，只要前后文件格式，编码一致没有任何问题


try-catch-finally
	finally:在异常处理是提供finally块来执行所有清除操作，比如说IO流中的释放资源

	特点：被finally控制的语句最终一定会执行，除非JVM（java虚拟机）退出

	异常处理标准格式:try...catch...finally

	如
		try{
			OutputStream fos = new FileOutputStream("a.txt");
			os.write(97);

		}catch(IOException e){
			
			e.printStackTrace();

		} finally{
			//哪怕上面有return执行,也必须执行完这里才行
			// 开发中不建议在这里加return，如果加了，返回的永远是这里的数据，这样会出问题
			os.close();

		}

		finally代码块是最终一定会执行的，可以在代码执行完毕的最后用于释放资源

文件字符输入流：Reader
	作用:以内存为基准，把磁盘文件中的数据以字符的形式读取到内存中去

	构造器								说明
	public FileReader(File file)		创建字符输入流管道与源文件对象接通
	public FileReader(String pathName)	创建字符输入流管道与源文件路径接通


	方法名称								说明
	public int read()					每次读取一个字符返回，如果字符已经没有可读的返回-1
	public int read(char[] buffer)		每次读取一个字符数组，返回读取的字符个数，如果字符已经没有可读的返回-1

	read()字符流的好坏
		读取中文字符不会出现乱码（如果代码和文件编码一致）
		性能较慢
	read(char[] buffer)
		性能得到提升

文件字符输出流写数据的方法有
		方法名称					说明
		void write(int c)							写一个字符
		void write(char[] cbuf)						写入一个字符数组
		void write(char[] cbuf, int off, int len)	写入字符数组的一部分
		void write(String str)	 					写一个字符串
		void write(String str, int off, int len)	写一个字符串的一部分

	实现数据追加
	public FileWriter(String filepath, boolean append) append=true追加数据

	字符输出流实现换行
	fw.write("/r/n");

	写出去的数据能成功生效必须加以下代码
	flush()刷新数据
	coloe()方法是关闭流，关闭包含刷新，关闭后流不可以继续使用了。

	字节流，字符流如何选择使用
		字节流适合做一切文件数据的拷贝（音视频，文本)
		字节流不适合读取中文内容输出
		字节流适合做文本文件的操作(读,写)
