window对象提供了两个非常好用的方法-定时器

setTimeout(调用函数,[延迟的毫秒数])
	setTimeout()方法用于设置一个定时器,该定时器在定时器到期后执行调用函数

	页面中可能由很多定时器，需要给定时器加标识符(取名字 var name = setTimeout())

setInterval()
	与上一个定时器基本相同，不过这个方法会反复调用函数

回调函数 callback:
	setTimeout()这个调用函数我们也称为回调函数callback
	普通函数时按照代码顺序直接调用
	而这个函数,需要等待时间，时间到了才去调用这个函数，因此称为回调函数
	简单理解:回调,就是回头调用的意思,上一件事干完，再回头再调用这个函数


停止定时器
	window.clearTimeout(timeout ID);
	window.clearInterval(interval ID);

Js执行机制
	js是单线程
	为了解决这个问题，利用多核cpu的计算能力，HTML5提出Web Worker标准,允许JavaScript脚本创造斗个线程
	于是，JS中出现了同步和异步

	同步:
		前一个任务结束后再执行后一个任务,程序的执行顺序与任务排列顺序是一致的,同步的。
	异步:
		可以做多件事（多线程)

	执行机制
		先执行同步任务，再执行异步任务

location对象 
	window对象给我们提供了一个location对象属性用于获取或设置窗体的URL，并且可以用于解析URL。因为这个属性返回的是一个对象，所以我们将这个属性也称为location对象


	location.href		获取或者设置 整个URL
	location.host		返回主机(域名)
	location.port		返回端口号 如果未写返回 空字符串
	location.pathname 	返回路径
	location.search 	返回参数
	location.hash		返回片段 #后面内容 常见于链接描点

location常见的方法
	location.assign()	跟href一样,可以跳转页面(也称为重定向页面)
	location.replace()	替换当前页面,因为不记得历史，所以不能后退页面
	location.reload()	重新加载页面，相当于刷新按钮或者f5如果参数为true强制刷新ctrl+f5


navigator对象
	navigator对象包含有关浏览器的信息，它有很多属性,我们最常用的是userAgent,该属性可以返回由客户机发送服务器的user-agent头部的值(常用于检测用户是手机端还是pc端)

history对象
	window对象给我们提供了一个history对象,与浏览器历史记录进行交互。该对象包含用户(在浏览器窗口中)访问过的URL

	history对象方法		作用
	back()				可以后退功能
	forward()			前进功能
	go(参数)				前进后退功能 参数如果是1前进1个页面 如果-1后退1个页面
